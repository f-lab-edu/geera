name: Integration and Delivery Workflow

on:
  push:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key-gradle: ${{ steps.cache-keys.outputs.gradle-key }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache Gradle packages
        id: cache-keys
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

  build_and_test:
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ needs.setup.outputs.cache-key-gradle }}

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Build, Test, and Quality Checks
        run: ./gradlew build test checkstyleMain pmdMain pmdTest jacocoTestCoverageVerification

      - name: Set SonarCloud Project Key
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)
          ORG_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)
          SONAR_PROJECT_KEY="${ORG_NAME}_${REPO_NAME}"
          echo "SONAR_PROJECT_KEY=$SONAR_PROJECT_KEY" >> $GITHUB_ENV 

      - name: SonarCloud Analysis
        run: ./gradlew sonarqube -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} -Dsonar.organization=f-lab-edu-1 -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SECRET_SONARQUBE }} -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
        env:
          SONAR_TOKEN: ${{ secrets.SECRET_SONARQUBE }}

      - name: Upload JAR file as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: geera-jar
          path: build/libs/geera-0.0.1-SNAPSHOT.jar

  docker_build_and_deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download JAR file
        uses: actions/download-artifact@v2
        with:
          name: geera-jar
          path: build/libs

      - name: Build Docker image
        run: docker build -t seungminyi95/geera-api:latest .

      - name: Push Docker image
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }}
          docker push seungminyi95/geera-api:latest

      - name: Deploy to Remote Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            docker pull seungminyi95/geera-api:latest
            docker run -d -p 8080:8080 \
            -e GEERA_DB_USER=${{ secrets.GEERA_DB_USER }} \
            -e GEERA_DB_PASSWORD=${{ secrets.GEERA_DB_PASSWORD }} \
            -e GEERA_JWT_SECRET=${{ secrets.GEERA_JWT_SECRET }} \
            seungminyi95/geera-api:latest
